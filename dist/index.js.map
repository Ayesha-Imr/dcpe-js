{"version":3,"file":"index.js","sources":["../src/exceptions/index.js","../src/keys/index.js","../src/crypto/index.js","../src/headers/index.js","../src/key_provider/index.js","../src/crypto/hkdf.js","../src/rag_encryption/index.js","../src/utils/config-validator.js","../src/adapters/base.js","../src/dcpe.js","../src/index.js"],"sourcesContent":["// Base class for all exceptions\r\nclass DCPEError extends Error {\r\n    /**\r\n     * Initializes the base error with a default or provided message.\r\n     * @param {string} message - The error message.\r\n     */\r\n    constructor(message = \"An error occurred in the SDK\") {\r\n        super(message);\r\n        this.name = \"DCPEError\";\r\n    }\r\n}\r\n\r\n// Error while loading or with invalid configuration\r\nclass InvalidConfigurationError extends DCPEError {\r\n    constructor(message = \"Invalid configuration\") {\r\n        super(`InvalidConfigurationError: ${message}`);\r\n        this.name = \"InvalidConfigurationError\";\r\n    }\r\n}\r\n\r\n// Error with key used for encryption or decryption\r\nclass InvalidKeyError extends DCPEError {\r\n    constructor(message = \"Invalid key\") {\r\n        super(`InvalidKeyError: ${message}`);\r\n        this.name = \"InvalidKeyError\";\r\n    }\r\n}\r\n\r\n// Error with user-provided input data\r\nclass InvalidInputError extends DCPEError {\r\n    constructor(message = \"Invalid input\") {\r\n        super(`InvalidInputError: ${message}`);\r\n        this.name = \"InvalidInputError\";\r\n    }\r\n}\r\n\r\n// Base class for encryption-related errors\r\nclass EncryptError extends DCPEError {\r\n    constructor(message = \"Encryption error\") {\r\n        super(`EncryptError: ${message}`);\r\n        this.name = \"EncryptError\";\r\n    }\r\n}\r\n\r\n// Base class for decryption-related errors\r\nclass DecryptError extends DCPEError {\r\n    constructor(message = \"Decryption error\") {\r\n        super(`DecryptError: ${message}`);\r\n        this.name = \"DecryptError\";\r\n    }\r\n}\r\n\r\n// Errors specific to vector encryption\r\nclass VectorEncryptError extends EncryptError {\r\n    constructor(message = \"Vector encryption error\") {\r\n        super(message); \r\n        this.name = \"VectorEncryptError\";\r\n        this.message = `VectorEncryptError: ${message.replace(/^VectorEncryptError: /, '')}`;\r\n    }\r\n}\r\n\r\n// Errors specific to vector decryption\r\nclass VectorDecryptError extends DecryptError {\r\n    constructor(message = \"Vector decryption error\") {\r\n        super(message); \r\n        this.name = \"VectorDecryptError\";\r\n        this.message = `VectorDecryptError: ${message.replace(/^VectorDecryptError: /, '')}`;\r\n    }\r\n}\r\n\r\n\r\n// Error due to numerical overflow during encryption\r\nclass OverflowError extends EncryptError {\r\n    constructor(message = \"Embedding or approximation factor too large\") {\r\n        super(message); \r\n        this.name = \"OverflowError\";\r\n        this.message = `OverflowError: ${message.replace(/^OverflowError: /, '')}`;\r\n    }\r\n}\r\n\r\n// Error during Protobuf serialization or deserialization\r\nclass ProtobufError extends DCPEError {\r\n    constructor(message = \"Protobuf error\") {\r\n        super(`ProtobufError: ${message}`);\r\n        this.name = \"ProtobufError\";\r\n    }\r\n}\r\n\r\n// Error during a request to an external service (like TSP)\r\nclass RequestError extends DCPEError {\r\n    constructor(message = \"Request error\") {\r\n        super(`RequestError: ${message}`);\r\n        this.name = \"RequestError\";\r\n    }\r\n}\r\n\r\n// Error during JSON serialization or deserialization\r\nclass SerdeJsonError extends DCPEError {\r\n    constructor(message = \"Serde JSON error\") {\r\n        super(`SerdeJsonError: ${message}`);\r\n        this.name = \"SerdeJsonError\";\r\n    }\r\n}\r\n\r\n// Error directly from the Tenant Security Proxy (TSP)\r\n/**\r\n * Represents a TSP (Third-Party Service Provider) error.\r\n * This error extends the DCPEError class and includes additional\r\n * details specific to TSP-related issues.\r\n *\r\n * @class\r\n * @extends DCPEError\r\n * \r\n * @param {string} errorVariant - The error variant, typically a string representation\r\n *                                that categorizes the type of error.\r\n * @param {number} httpCode - The HTTP status code associated with the error.\r\n * @param {number} tspCode - The TSP-specific error code providing additional context.\r\n * @param {string} [message=\"TSP error\"] - A descriptive error message.\r\n */\r\nclass TspError extends DCPEError {\r\n    /**\r\n     * Initializes the TSP error with specific details.\r\n     * @param {string} errorVariant - The error variant (e.g., string representation).\r\n     * @param {number} httpCode - The HTTP status code.\r\n     * @param {number} tspCode - The TSP-specific error code.\r\n     * @param {string} message - The error message.\r\n     */\r\n    constructor(errorVariant, httpCode, tspCode, message = \"TSP error\") {\r\n        super(`TspError: ${message}, Variant: '${errorVariant}', HTTP Code: ${httpCode}, TSP Code: ${tspCode}`);\r\n        this.name = \"TspError\";\r\n        this.errorVariant = errorVariant;\r\n        this.httpCode = httpCode;\r\n        this.tspCode = tspCode;\r\n    }\r\n}\r\n\r\n// Export all error classes\r\nexport {\r\n    DCPEError,\r\n    InvalidConfigurationError,\r\n    InvalidKeyError,\r\n    InvalidInputError,\r\n    EncryptError,\r\n    DecryptError,\r\n    VectorEncryptError,\r\n    VectorDecryptError,\r\n    OverflowError,\r\n    ProtobufError,\r\n    RequestError,\r\n    SerdeJsonError,\r\n    TspError\r\n};","import crypto from 'crypto';\r\nimport { InvalidKeyError } from '../exceptions/index.js';\r\n\r\n\r\n/**\r\n * Represents a raw encryption key as bytes.\r\n */\r\nclass EncryptionKey {\r\n    /**\r\n     * @param {Buffer} keyBytes - The raw encryption key as a Buffer.\r\n     */\r\n    constructor(keyBytes) {\r\n        if (!Buffer.isBuffer(keyBytes)) {\r\n            throw new TypeError('EncryptionKey must be initialized with a Buffer');\r\n        }\r\n        this.keyBytes = keyBytes;\r\n    }\r\n\r\n\r\n    /**\r\n     * Returns the raw key bytes.\r\n     * @returns {Buffer}\r\n     */\r\n    getBytes() {\r\n        return this.keyBytes;\r\n    }\r\n\r\n\r\n    /**\r\n     * Checks equality with another EncryptionKey.\r\n     * @param {EncryptionKey} other\r\n     * @returns {boolean}\r\n     */\r\n    equals(other) {\r\n        return other instanceof EncryptionKey && this.keyBytes.equals(other.keyBytes);\r\n    }\r\n\r\n\r\n    /**\r\n     * String representation of the EncryptionKey.\r\n     * @returns {string}\r\n     */\r\n    toString() {\r\n        return `EncryptionKey(bytes of length: ${this.keyBytes.length})`;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * Represents the scaling factor used in vector encryption.\r\n */\r\nclass ScalingFactor {\r\n    /**\r\n     * @param {number} factor - The scaling factor as a float.\r\n     */\r\n    constructor(factor) {\r\n        if (typeof factor !== 'number') {\r\n            throw new TypeError('ScalingFactor must be initialized with a number');\r\n        }\r\n        this.factor = factor;\r\n    }\r\n\r\n\r\n    /**\r\n     * Returns the scaling factor value.\r\n     * @returns {number}\r\n     */\r\n    getFactor() {\r\n        return this.factor;\r\n    }\r\n\r\n\r\n    /**\r\n     * Checks equality with another ScalingFactor.\r\n     * @param {ScalingFactor} other\r\n     * @returns {boolean}\r\n     */\r\n    equals(other) {\r\n        return other instanceof ScalingFactor && this.factor === other.factor;\r\n    }\r\n\r\n\r\n    /**\r\n     * String representation of the ScalingFactor.\r\n     * @returns {string}\r\n     */\r\n    toString() {\r\n        return `ScalingFactor(factor: ${this.factor})`;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * Represents the combined key for vector encryption, including scaling factor and encryption key.\r\n */\r\nclass VectorEncryptionKey {\r\n    /**\r\n     * @param {ScalingFactor} scalingFactor - The scaling factor.\r\n     * @param {EncryptionKey} key - The encryption key.\r\n     */\r\n    constructor(scalingFactor, key) {\r\n        if (!(scalingFactor instanceof ScalingFactor)) {\r\n            throw new TypeError('VectorEncryptionKey scalingFactor must be a ScalingFactor instance');\r\n        }\r\n        if (!(key instanceof EncryptionKey)) {\r\n            throw new TypeError('VectorEncryptionKey key must be an EncryptionKey instance');\r\n        }\r\n        this.scalingFactor = scalingFactor;\r\n        this.key = key;\r\n    }\r\n\r\n\r\n    /**\r\n     * Derives a VectorEncryptionKey from a master secret, tenant ID, and derivation path.\r\n     * @param {Buffer} secret - The master secret as a Buffer.\r\n     * @param {string} tenantId - The tenant ID.\r\n     * @param {string} derivationPath - The derivation path.\r\n     * @returns {VectorEncryptionKey}\r\n     */\r\n    static deriveFromSecret(secret, tenantId, derivationPath) {\r\n        if (!Buffer.isBuffer(secret)) {\r\n            throw new TypeError('Secret must be a Buffer');\r\n        }\r\n        if (typeof tenantId !== 'string') {\r\n            throw new TypeError('Tenant ID must be a string');\r\n        }\r\n        if (typeof derivationPath !== 'string') {\r\n            throw new TypeError('Derivation Path must be a string');\r\n        }\r\n\r\n\r\n        const payload = Buffer.from(`${tenantId}-${derivationPath}`, 'utf-8');\r\n        const hashResultBytes = crypto.createHmac('sha512', secret).update(payload).digest();\r\n        return this.unsafeBytesToKey(hashResultBytes);\r\n    }\r\n\r\n\r\n   /**\r\n     * Constructs a VectorEncryptionKey from raw bytes.\r\n     * @param {Buffer} keyBytes - The raw bytes.\r\n     * @returns {VectorEncryptionKey}\r\n     * @throws {InvalidKeyError} If keyBytes is not long enough.\r\n     */\r\n    static unsafeBytesToKey(keyBytes) {\r\n        if (keyBytes.length < 35) {\r\n            throw new InvalidKeyError('Key bytes must be at least 35 bytes long');\r\n        }\r\n\r\n\r\n        const scalingFactorBytes = keyBytes.subarray(0, 3);\r\n        const keyMaterialBytes = keyBytes.subarray(3, 35);\r\n\r\n\r\n        // Add leading zero byte to match Python's behavior\r\n        const paddedBytes = Buffer.concat([Buffer.from([0]), scalingFactorBytes]);\r\n       \r\n        // Use readUInt32BE instead of parseInt for consistent binary representation\r\n        const scalingFactorU32 = paddedBytes.readUInt32BE(0);\r\n       \r\n        const scalingFactor = new ScalingFactor(scalingFactorU32);\r\n        const encryptionKey = new EncryptionKey(keyMaterialBytes);\r\n\r\n\r\n        return new VectorEncryptionKey(scalingFactor, encryptionKey);\r\n    }\r\n\r\n\r\n    /**\r\n     * Checks equality with another VectorEncryptionKey.\r\n     * @param {VectorEncryptionKey} other\r\n     * @returns {boolean}\r\n     */\r\n    equals(other) {\r\n        return (\r\n            other instanceof VectorEncryptionKey &&\r\n            this.scalingFactor.equals(other.scalingFactor) &&\r\n            this.key.equals(other.key)\r\n        );\r\n    }\r\n\r\n\r\n    /**\r\n     * String representation of the VectorEncryptionKey.\r\n     * @returns {string}\r\n     */\r\n    toString() {\r\n        return `VectorEncryptionKey(scalingFactor=${this.scalingFactor}, key=${this.key})`;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * Generates a cryptographically random EncryptionKey (32 bytes).\r\n * @returns {EncryptionKey}\r\n */\r\nfunction generateRandomKey() {\r\n    return new EncryptionKey(crypto.randomBytes(32));\r\n}\r\n\r\n\r\n/**\r\n * Generates encryption keys for use with DCPE\r\n * @param {Object} options - Options for key generation\r\n * @param {number} [options.approximationFactor=1.0] - Approximation factor for vector encryption\r\n * @returns {Promise<Buffer>} - Generated encryption key material\r\n */\r\nasync function generateEncryptionKeys(options = {}) {\r\n    const { approximationFactor = 1.0 } = options;\r\n\r\n\r\n    // Generate a random encryption key\r\n    const keyMaterial = crypto.randomBytes(32);\r\n\r\n\r\n    // Create a ScalingFactor instance\r\n    const scalingFactor = new ScalingFactor(approximationFactor);\r\n\r\n\r\n    // Create and return a VectorEncryptionKey\r\n    return new VectorEncryptionKey(scalingFactor, new EncryptionKey(keyMaterial));\r\n}\r\n\r\n\r\nexport {\r\n    EncryptionKey,\r\n    ScalingFactor,\r\n    VectorEncryptionKey,\r\n    generateRandomKey,\r\n    generateEncryptionKeys\r\n}","import crypto from 'crypto';\r\nimport { create, all } from 'mathjs';\r\nimport { InvalidKeyError, DecryptError } from '../exceptions/index.js';\r\nimport { VectorEncryptionKey, ScalingFactor, EncryptionKey } from '../keys/index.js';\r\n\r\n\r\n\r\n\r\nconst math = create(all);\r\n\r\n\r\n// Constants\r\nconst SHUFFLE_KEY = \"One Ring to rule them all, One Ring to find them, One Ring to bring them all, and in the darkness bind them\";\r\n\r\n\r\n/**\r\n * Represents an authentication hash.\r\n */\r\nclass AuthHash {\r\n    constructor(hashBytes) {\r\n        if (!Buffer.isBuffer(hashBytes)) {\r\n            throw new TypeError(\"AuthHash must be initialized with a Buffer\");\r\n        }\r\n        if (hashBytes.length !== 32) {\r\n            throw new Error(\"AuthHash must be 32 bytes long\");\r\n        }\r\n        this.hashBytes = hashBytes;\r\n    }\r\n\r\n\r\n    getBytes() {\r\n        return this.hashBytes;\r\n    }\r\n\r\n\r\n    equals(other) {\r\n        return other instanceof AuthHash && this.hashBytes.equals(other.hashBytes);\r\n    }\r\n\r\n\r\n    toString() {\r\n        return `AuthHash(${this.hashBytes.toString('hex')})`;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * Generates a random vector sampled from a multivariate normal distribution.\r\n * @param {number} dimensionality - The dimensionality of the vector.\r\n * @returns {Array<number>} - The sampled vector.\r\n */\r\nfunction sampleNormalVector(dimensionality) {\r\n    return Array.from({ length: dimensionality }, () => {\r\n      // Use crypto instead of Math.random()\r\n      const u1Bytes = crypto.randomBytes(4);\r\n      const u2Bytes = crypto.randomBytes(4);\r\n      const u1 = u1Bytes.readUInt32LE(0) / 0x100000000;\r\n      const u2 = u2Bytes.readUInt32LE(0) / 0x100000000;\r\n      const z0 = Math.sqrt(-2.0 * Math.log(u1)) * Math.cos(2.0 * Math.PI * u2);\r\n      return z0;\r\n    });\r\n  }\r\n\r\n\r\n\r\n\r\n/**\r\n * Generates a random uniform point in the range [0, 1).\r\n *\r\n * This function uses cryptographic randomness to ensure high-quality random values.\r\n * It generates 4 random bytes, interprets them as a 32-bit unsigned integer,\r\n * and then normalizes the value to a floating-point number in the range [0, 1).\r\n *\r\n * @returns {number} A random floating-point number in the range [0, 1).\r\n */\r\nfunction sampleUniformPoint() {\r\n    const bytes = crypto.randomBytes(4);\r\n    return bytes.readUInt32LE(0) / 0x100000000;\r\n  }\r\n\r\n\r\n/**\r\n * Calculates a uniform point within an n-dimensional ball.\r\n * @param {ScalingFactor} scalingFactor - The scaling factor.\r\n * @param {number} approximationFactor - The approximation factor.\r\n * @param {number} uniformPoint - The sampled uniform point.\r\n * @param {number} dimensionality - The dimensionality of the vector.\r\n * @returns {number} - The calculated point.\r\n */\r\nfunction calculateUniformPointInBall(scalingFactor, approximationFactor, uniformPoint, dimensionality) {\r\n    const radius = (scalingFactor.getFactor() / 4) * approximationFactor;\r\n    return radius * Math.pow(uniformPoint, 1 / dimensionality);\r\n}\r\n\r\n\r\n/**\r\n * Normalizes a sampled vector.\r\n * @param {Array<number>} vector - The sampled vector.\r\n * @param {number} scale - The scaling factor.\r\n * @returns {Array<number>} - The normalized vector.\r\n */\r\nfunction normalizeVector(vector, scale) {\r\n    const norm = math.norm(vector);\r\n    return vector.map((val) => (val * scale) / norm);\r\n}\r\n\r\n\r\n/**\r\n * Generates a normalized noise vector for encryption.\r\n * @param {VectorEncryptionKey} key - The encryption key.\r\n * @param {Buffer} iv - The initialization vector.\r\n * @param {number} approximationFactor - The approximation factor.\r\n * @param {number} dimensionality - The dimensionality of the vector.\r\n * @returns {Array<number>} - The noise vector.\r\n */\r\nfunction generateNoiseVector(key, iv, approximationFactor, dimensionality) {\r\n    if (!key) {\r\n        throw new Error(\"Key is required for noise vector generation\");\r\n    }\r\n    if (!iv || !Buffer.isBuffer(iv)) {\r\n        throw new Error(\"IV must be a valid Buffer for noise vector generation\");\r\n    }\r\n    if (!Number.isFinite(approximationFactor) || approximationFactor <= 0) {\r\n        throw new Error(\"Approximation factor must be a positive number\");\r\n    }\r\n    if (!Number.isInteger(dimensionality) || dimensionality <= 0) {\r\n        throw new Error(\"Dimensionality must be a positive integer\");\r\n    }\r\n   \r\n    const normalVector = sampleNormalVector(dimensionality);\r\n    const uniformPoint = sampleUniformPoint();\r\n    const scaledPoint = calculateUniformPointInBall(key.scalingFactor, approximationFactor, uniformPoint, dimensionality);\r\n    return normalizeVector(normalVector, scaledPoint);\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * Creates a random number generator (RNG) function based on a given cryptographic key.\r\n * The RNG function generates pseudo-random numbers in the range [0, 1) using HMAC with SHA-256.\r\n *\r\n * @param {Object} key - The cryptographic key used to seed the RNG. It must have a `getBytes` method\r\n *                       that returns the key as a byte array.\r\n * @returns {Function} A function that generates a pseudo-random number between 0 (inclusive) and 1 (exclusive)\r\n *                     each time it is called.\r\n */\r\nfunction createRngFromKey(key) {\r\n    return function() {\r\n      const hmac = crypto.createHmac('sha256', key.getBytes());\r\n      hmac.update(Buffer.from([this.counter++ & 0xFF]));\r\n      const bytes = hmac.digest();\r\n      return bytes.readUInt32LE(0) / 0x100000000;\r\n    }.bind({ counter: 0 });\r\n  }\r\n\r\n\r\n/**\r\n * Shuffles an array deterministically based on a key.\r\n * @param {EncryptionKey} key - The encryption key used for deterministic shuffling.\r\n * @param {Array} inputArray - The array to shuffle.\r\n * @returns {Array} - The shuffled array.\r\n */\r\nfunction shuffle(key, inputArray) {\r\n    if (!key || !Array.isArray(inputArray)) {\r\n        throw new Error(\"Invalid input to shuffle function\");\r\n    }\r\n\r\n\r\n    // Create a deterministic random number generator based on the key\r\n    const rng = createRngFromKey(key);\r\n\r\n\r\n    // Create an array of indices and shuffle them\r\n    const indices = inputArray.map((_, index) => index);\r\n    for (let i = indices.length - 1; i > 0; i--) {\r\n        const j = Math.floor(rng() * (i + 1));\r\n        [indices[i], indices[j]] = [indices[j], indices[i]];\r\n    }\r\n\r\n\r\n    // Use the shuffled indices to reorder the input array\r\n    return indices.map((index) => inputArray[index]);\r\n}\r\n\r\n\r\n/**\r\n * Unshuffles an array that was shuffled deterministically based on a key.\r\n * @param {EncryptionKey} key - The encryption key used for deterministic shuffling.\r\n * @param {Array} shuffledArray - The array to unshuffle.\r\n * @returns {Array} - The unshuffled array.\r\n */\r\n/**\r\n * Reverses the shuffling of an array based on a given key.\r\n *\r\n * @param {string} key - A string used to seed the deterministic random number generator.\r\n * @param {Array} shuffledArray - The array that was previously shuffled and needs to be restored to its original order.\r\n * @returns {Array} - The original array restored to its unshuffled order.\r\n * @throws {Error} - Throws an error if the key is not provided or if the shuffledArray is not an array.\r\n *\r\n * @description\r\n * This function assumes that the array was shuffled using a deterministic algorithm\r\n * based on the same key. It recreates the shuffle permutation using a seeded random\r\n * number generator and then reverses the shuffle to restore the original order.\r\n *\r\n * Note: The function relies on the existence of `createRngFromKey`, which must generate\r\n * a deterministic random number generator seeded by the provided key.\r\n */\r\nfunction unshuffle(key, shuffledArray) {\r\n    if (!key || !Array.isArray(shuffledArray)) {\r\n        throw new Error(\"Invalid input to unshuffle function\");\r\n    }\r\n\r\n\r\n    // Create a deterministic random number generator based on the key\r\n    const rng = createRngFromKey(key);\r\n\r\n\r\n    // First recreate the exact same permutation that was used in the shuffle function\r\n    const indices = Array.from({ length: shuffledArray.length }, (_, i) => i);\r\n    for (let i = indices.length - 1; i > 0; i--) {\r\n        const j = Math.floor(rng() * (i + 1));\r\n        [indices[i], indices[j]] = [indices[j], indices[i]];\r\n    }\r\n\r\n\r\n    // Create a mapping from shuffled position to original position\r\n    const reverseMap = new Array(indices.length);\r\n    for (let i = 0; i < indices.length; i++) {\r\n        reverseMap[indices[i]] = i;\r\n    }\r\n\r\n\r\n    // Use the mapping to restore the original order\r\n    return shuffledArray.map((_, i) => shuffledArray[reverseMap[i]]);\r\n}\r\n\r\n\r\n/**\r\n * Computes an authentication hash for a vector embedding.\r\n * @param {VectorEncryptionKey} key - The encryption key.\r\n * @param {number} approximationFactor - The approximation factor.\r\n * @param {Buffer} iv - The initialization vector.\r\n * @param {Array<number>} encryptedVector - The encrypted vector.\r\n * @returns {AuthHash} - The computed authentication hash.\r\n */\r\nfunction computeAuthHash(key, approximationFactor, iv, encryptedVector) {\r\n    const hmac = crypto.createHmac('sha256', key.key.getBytes());\r\n    hmac.update(Buffer.from(Float32Array.of(key.scalingFactor.getFactor()).buffer));\r\n    hmac.update(Buffer.from(Float32Array.of(approximationFactor).buffer));\r\n    hmac.update(iv);\r\n    encryptedVector.forEach((val) => {\r\n        hmac.update(Buffer.from(Float32Array.of(val).buffer));\r\n    });\r\n    return new AuthHash(hmac.digest());\r\n}\r\n\r\n\r\n/**\r\n * Encrypts a vector embedding.\r\n * @param {VectorEncryptionKey} key - The encryption key.\r\n * @param {number} approximationFactor - The approximation factor.\r\n * @param {Array<number>} vector - The plaintext vector.\r\n * @returns {Object} - The encryption result containing ciphertext, IV, and auth hash.\r\n */\r\nfunction encryptVector(key, approximationFactor, vector) {\r\n    if (!key || !key.scalingFactor) {\r\n        throw new InvalidKeyError(\"Scaling factor is not initialized in the encryption key\");\r\n    }\r\n\r\n\r\n    if (key.scalingFactor.getFactor() === 0) {\r\n        throw new InvalidKeyError(\"Scaling factor cannot be zero\");\r\n    }\r\n\r\n\r\n    const iv = crypto.randomBytes(12);\r\n    const noiseVector = generateNoiseVector(key, iv, approximationFactor, vector.length);\r\n    const ciphertext = vector.map((val, i) => key.scalingFactor.getFactor() * val + noiseVector[i]);\r\n\r\n\r\n    if (!ciphertext.every((val) => Number.isFinite(val))) {\r\n        throw new Error(\"Overflow error: Embedding or approximation factor too large.\");\r\n    }\r\n\r\n\r\n    const authHash = computeAuthHash(key, approximationFactor, iv, ciphertext);\r\n\r\n\r\n    return { ciphertext, iv, authHash };\r\n}\r\n/**\r\n * Decrypts an encrypted vector embedding.\r\n * @param {VectorEncryptionKey} key - The encryption key.\r\n * @param {number} approximationFactor - The approximation factor.\r\n * @param {Object} encryptedResult - The encryption result containing ciphertext, IV, and auth hash.\r\n * @returns {Array<number>} - The decrypted vector.\r\n */\r\nfunction decryptVector(key, approximationFactor, encryptedResult) {\r\n    if (key.scalingFactor.getFactor() === 0) {\r\n        throw new InvalidKeyError(\"Scaling factor cannot be zero\");\r\n    }\r\n\r\n\r\n    const { ciphertext, iv, authHash } = encryptedResult;\r\n\r\n\r\n    if (!computeAuthHash(key, approximationFactor, iv, ciphertext).equals(authHash)) {\r\n        throw new DecryptError(\"Authentication hash mismatch\");\r\n    }\r\n\r\n\r\n    const noiseVector = generateNoiseVector(key, iv, approximationFactor, ciphertext.length);\r\n    return ciphertext.map((val, i) => (val - noiseVector[i]) / key.scalingFactor.getFactor());\r\n}\r\n\r\n\r\nexport {\r\n    AuthHash,\r\n    encryptVector,\r\n    decryptVector,\r\n    computeAuthHash,\r\n    generateNoiseVector,\r\n    shuffle,\r\n    unshuffle,\r\n    sampleNormalVector,\r\n    sampleUniformPoint\r\n};\r\n","import { InvalidInputError } from '../exceptions/index.js';\r\nimport { AuthHash } from '../crypto/index.js';\r\n\r\n/**\r\n * Enumeration for EDEK Types\r\n */\r\nconst EdekType = Object.freeze({\r\n    STANDALONE: \"Standalone\",\r\n    SAAS_SHIELD: \"SaasShield\",\r\n    DATA_CONTROL_PLATFORM: \"DataControlPlatform\"\r\n});\r\n\r\n/**\r\n * Enumeration for Payload Types\r\n */\r\nconst PayloadType = Object.freeze({\r\n    DETERMINISTIC_FIELD: \"DeterministicField\",\r\n    VECTOR_METADATA: \"VectorMetadata\",\r\n    STANDARD_EDEK: \"StandardEdek\"\r\n});\r\n\r\n/**\r\n * Represents the Key ID Header\r\n */\r\nclass KeyIdHeader {\r\n    /**\r\n     * @param {number} keyId - The key ID (integer).\r\n     * @param {string} edekType - The EDEK type (from EdekType).\r\n     * @param {string} payloadType - The payload type (from PayloadType).\r\n     */\r\n    constructor(keyId, edekType, payloadType) {\r\n        if (typeof keyId !== 'number') {\r\n            throw new TypeError(\"keyId must be a number\");\r\n        }\r\n        if (!Object.values(EdekType).includes(edekType)) {\r\n            throw new TypeError(\"edekType must be a valid EdekType value\");\r\n        }\r\n        if (!Object.values(PayloadType).includes(payloadType)) {\r\n            throw new TypeError(\"payloadType must be a valid PayloadType value\");\r\n        }\r\n        this.keyId = keyId;\r\n        this.edekType = edekType;\r\n        this.payloadType = payloadType;\r\n    }\r\n\r\n    /**\r\n     * Creates a KeyIdHeader instance.\r\n     * @param {string} edekType - The EDEK type.\r\n     * @param {string} payloadType - The payload type.\r\n     * @param {number} keyId - The key ID.\r\n     * @returns {KeyIdHeader}\r\n     */\r\n    static createHeader(edekType, payloadType, keyId) {\r\n        return new KeyIdHeader(keyId, edekType, payloadType);\r\n    }\r\n\r\n    /**\r\n     * Serializes the KeyIdHeader to bytes.\r\n     * @returns {Buffer}\r\n     */\r\n    writeToBytes() {\r\n        const buffer = Buffer.alloc(6);\r\n        buffer.writeUInt32BE(this.keyId, 0); // Write keyId (4 bytes)\r\n        buffer.writeUInt8(this._encodeTypeByte(), 4); // Write encoded type byte\r\n        buffer.writeUInt8(0, 5); // Padding byte\r\n        return buffer;\r\n    }\r\n\r\n    /**\r\n     * Parses bytes and reconstructs a KeyIdHeader instance.\r\n     * @param {Buffer} headerBytes - The serialized header bytes.\r\n     * @returns {KeyIdHeader}\r\n     */\r\n    static parseFromBytes(headerBytes) {\r\n        if (headerBytes.length !== 6) {\r\n            throw new InvalidInputError(`Header bytes must be 6 bytes long, got ${headerBytes.length}`);\r\n        }\r\n\r\n        const keyId = headerBytes.readUInt32BE(0); // Read keyId (4 bytes)\r\n        const typeByte = headerBytes.readUInt8(4); // Read type byte\r\n        const paddingByte = headerBytes.readUInt8(5); // Read padding byte\r\n\r\n        if (paddingByte !== 0) {\r\n            throw new InvalidInputError(`Padding byte in header is not zero: ${paddingByte}`);\r\n        }\r\n\r\n        const { edekType, payloadType } = this._decodeTypeByte(typeByte);\r\n        return new KeyIdHeader(keyId, edekType, payloadType);\r\n    }\r\n\r\n    /**\r\n     * Encodes EDEK type and Payload type into a single byte.\r\n     * @returns {number}\r\n     */\r\n    _encodeTypeByte() {\r\n        const edekNumeric = Object.values(EdekType).indexOf(this.edekType) << 4; // Shift EDEK type to top 4 bits\r\n        const payloadNumeric = Object.values(PayloadType).indexOf(this.payloadType); // Payload type in bottom 4 bits\r\n        return edekNumeric | payloadNumeric;\r\n    }\r\n\r\n    /**\r\n     * Decodes the type byte back to EDEK type and Payload type.\r\n     * @param {number} typeByte - The encoded type byte.\r\n     * @returns {{ edekType: string, payloadType: string }}\r\n     */\r\n    static _decodeTypeByte(typeByte) {\r\n        const edekTypeIndex = (typeByte & 0xF0) >> 4; // Extract top 4 bits\r\n        const payloadTypeIndex = typeByte & 0x0F; // Extract bottom 4 bits\r\n\r\n        const edekType = Object.values(EdekType)[edekTypeIndex];\r\n        const payloadType = Object.values(PayloadType)[payloadTypeIndex];\r\n\r\n        if (!edekType || !payloadType) {\r\n            throw new InvalidInputError(\"Invalid type byte encoding\");\r\n        }\r\n\r\n        return { edekType, payloadType };\r\n    }\r\n}\r\n\r\n/**\r\n * Represents Vector Metadata, including IV and AuthHash.\r\n */\r\nclass VectorMetadata {\r\n    /**\r\n     * @param {KeyIdHeader} keyIdHeader - The KeyIdHeader instance.\r\n     * @param {Buffer} iv - The initialization vector.\r\n     * @param {AuthHash} authHash - The authentication hash.\r\n     */\r\n    constructor(keyIdHeader, iv, authHash) {\r\n        if (!(keyIdHeader instanceof KeyIdHeader)) {\r\n            throw new TypeError(\"keyIdHeader must be an instance of KeyIdHeader\");\r\n        }\r\n        if (!Buffer.isBuffer(iv)) {\r\n            throw new TypeError(\"iv must be a Buffer\");\r\n        }\r\n        if (!(authHash instanceof AuthHash)) {\r\n            throw new TypeError(\"authHash must be an instance of AuthHash\");\r\n        }\r\n        this.keyIdHeader = keyIdHeader;\r\n        this.iv = iv;\r\n        this.authHash = authHash;\r\n    }\r\n}\r\n\r\n/**\r\n * Encodes vector metadata into bytes.\r\n * @param {KeyIdHeader} keyIdHeader - The KeyIdHeader instance.\r\n * @param {Buffer} iv - The initialization vector.\r\n * @param {AuthHash} authHash - The authentication hash.\r\n * @returns {Buffer}\r\n */\r\nfunction encodeVectorMetadata(keyIdHeader, iv, authHash) {\r\n    return Buffer.concat([\r\n        keyIdHeader.writeToBytes(),\r\n        iv,\r\n        authHash.getBytes()\r\n    ]);\r\n}\r\n\r\n/**\r\n * Decodes a byte stream with a prefixed KeyIdHeader.\r\n * @param {Buffer} valueBytes - The byte stream.\r\n * @returns {{ keyIdHeader: KeyIdHeader, remainingBytes: Buffer }}\r\n */\r\nfunction decodeVersionPrefixedValue(valueBytes) {\r\n    if (valueBytes.length < 6) {\r\n        throw new InvalidInputError(\"Value bytes too short to contain KeyIdHeader\");\r\n    }\r\n\r\n    const headerBytes = valueBytes.subarray(0, 6);\r\n    const remainingBytes = valueBytes.subarray(6);\r\n    const keyIdHeader = KeyIdHeader.parseFromBytes(headerBytes);\r\n\r\n    return { keyIdHeader, remainingBytes };\r\n}\r\n\r\nexport {\r\n    EdekType,\r\n    PayloadType,\r\n    KeyIdHeader,\r\n    VectorMetadata,\r\n    encodeVectorMetadata,\r\n    decodeVersionPrefixedValue\r\n};","import { ScalingFactor, EncryptionKey, VectorEncryptionKey } from '../keys/index.js';\r\n/**\r\n * Abstract KeyProvider class for managing cryptographic keys.\r\n */\r\nclass KeyProvider {\r\n    /**\r\n     * Retrieves a key from the provider.\r\n     * @param {string} [keyId] - The identifier for the key to retrieve.\r\n     * @returns {Promise<Buffer>} - The raw key material as a Buffer.\r\n     * @throws {Error} - If the key is not found or cannot be accessed.\r\n     */\r\n    async getKey(keyId) {\r\n        throw new Error(\"getKey method must be implemented by subclasses\");\r\n    }\r\n\r\n\r\n    /**\r\n     * Stores a key in the provider.\r\n     * @param {Buffer} keyMaterial - The raw key to store.\r\n     * @param {string} [keyId] - Optional identifier for the key.\r\n     * @returns {Promise<string>} - The identifier assigned to the stored key.\r\n     * @throws {Error} - If the key cannot be stored.\r\n     */\r\n    async storeKey(keyMaterial, keyId) {\r\n        throw new Error(\"storeKey method must be implemented by subclasses\");\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * ClientKeyProvider class for managing keys in an in-memory store (e.g., Zustand).\r\n */\r\nclass ClientKeyProvider extends KeyProvider {\r\n    /**\r\n     * @param {Object} keyStore - The in-memory key store (e.g., Zustand store).\r\n     */\r\n    constructor(keyStore) {\r\n        super();\r\n        if (typeof keyStore !== \"object\" || keyStore === null) {\r\n            throw new TypeError(\"keyStore must be a valid object\");\r\n        }\r\n        this.keyStore = keyStore;\r\n    }\r\n\r\n\r\n    /**\r\n     * Retrieves a key from the in-memory store.\r\n     * @param {string} [keyId] - The identifier for the key to retrieve.\r\n     * @returns {Promise<Buffer>} - The raw key material as a Buffer.\r\n     * @throws {Error} - If the key is not found.\r\n     */\r\n    async getKey(keyId) {\r\n        const key = this.keyStore[keyId || \"default\"];\r\n        if (!key) {\r\n            throw new Error(`Key not found: ${keyId || \"default\"}`);\r\n        }\r\n        return Buffer.from(key, \"base64\");\r\n    }\r\n\r\n\r\n    /**\r\n     * Stores a key in the in-memory store.\r\n     * @param {Buffer} keyMaterial - The raw key to store.\r\n     * @param {string} [keyId] - Optional identifier for the key.\r\n     * @returns {Promise<string>} - The identifier assigned to the stored key.\r\n     */\r\n    async storeKey(keyMaterial, keyId) {\r\n        const actualKeyId = keyId || \"default\";\r\n        this.keyStore[actualKeyId] = keyMaterial.toString(\"base64\");\r\n        return actualKeyId;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * LocalKeyProvider for managing keys locally\r\n * This provider stores keys in memory only for the lifetime of the instance\r\n */\r\nclass LocalKeyProvider extends KeyProvider {\r\n    /**\r\n     * @param {Object} config - Configuration options\r\n     */\r\n    constructor(config = {}) {\r\n        super();\r\n        this.keys = {};\r\n        this.currentKey = null;\r\n    }\r\n\r\n\r\n    /**\r\n     * Retrieves a key from the local store\r\n     * @param {string} [keyId] - The identifier for the key to retrieve\r\n     * @returns {Promise<Buffer>} - The raw key material as a Buffer\r\n     * @throws {Error} - If the key is not found\r\n     */\r\n    async getKey(keyId) {\r\n        const key = this.keys[keyId || \"default\"] || this.currentKey;\r\n        if (!key) {\r\n            throw new Error(`Key not found: ${keyId || \"default\"}`);\r\n        }\r\n        return key;\r\n    }\r\n\r\n\r\n    /**\r\n     * Stores a key in the local store\r\n     * @param {Buffer} keyMaterial - The raw key to store\r\n     * @param {string} [keyId] - Optional identifier for the key\r\n     * @returns {Promise<string>} - The identifier assigned to the stored key\r\n     */\r\n    async storeKey(keyMaterial, keyId) {\r\n        const actualKeyId = keyId || \"default\";\r\n        this.keys[actualKeyId] = keyMaterial;\r\n        return actualKeyId;\r\n    }\r\n\r\n\r\n    /**\r\n     * Sets the encryption keys\r\n     * @param {Object|Buffer} encryptionKeys - Encryption keys to set\r\n     */\r\n    setKeys(encryptionKeys) {\r\n        if (Buffer.isBuffer(encryptionKeys)) {\r\n            this.currentKey = encryptionKeys;\r\n        } else if (encryptionKeys && encryptionKeys instanceof VectorEncryptionKey) {\r\n            // Preserve VectorEncryptionKey instance directly\r\n            this.currentKey = encryptionKeys;\r\n        } else if (encryptionKeys && typeof encryptionKeys === 'object') {\r\n            // Handle objects that might be serialized VectorEncryptionKey\r\n            if (encryptionKeys.scalingFactor && encryptionKeys.key) {\r\n                // Attempt to reconstruct a VectorEncryptionKey\r\n                const scalingFactor = new ScalingFactor(\r\n                    encryptionKeys.scalingFactor.factor || encryptionKeys.scalingFactor\r\n                );\r\n                const key = new EncryptionKey(\r\n                    Buffer.isBuffer(encryptionKeys.key.keyBytes)\r\n                        ? encryptionKeys.key.keyBytes\r\n                        : Buffer.from(encryptionKeys.key.keyBytes || encryptionKeys.key)\r\n                );\r\n                this.currentKey = new VectorEncryptionKey(scalingFactor, key);\r\n            } else {\r\n                // Fallback to previous behavior\r\n                this.currentKey = encryptionKeys.key || encryptionKeys;\r\n            }\r\n        } else {\r\n            throw new TypeError(\"Invalid encryption keys format\");\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * Gets the current encryption keys\r\n     * @returns {Buffer} - The raw key material\r\n     */\r\n    getKeys() {\r\n        if (!this.currentKey) {\r\n            throw new Error(\"No encryption keys have been set\");\r\n        }\r\n        return this.currentKey;\r\n    }\r\n}\r\n\r\n\r\nexport { KeyProvider, ClientKeyProvider, LocalKeyProvider };\r\n","import crypto from 'crypto';\r\n\r\n/**\r\n * HMAC-based Key Derivation Function implementation.\r\n * \r\n * @param {Buffer} ikm - Input key material\r\n * @param {number} length - The desired length of the derived key\r\n * @param {Buffer} salt - Optional salt value (recommended)\r\n * @param {Buffer} info - Optional context and application specific information\r\n * @returns {Buffer} The derived key\r\n */\r\nfunction hkdf(ikm, length, salt, info) {\r\n    if (!Buffer.isBuffer(ikm)) {\r\n        throw new TypeError('Input key material must be a Buffer');\r\n    }\r\n    \r\n    // Default values\r\n    salt = salt || Buffer.alloc(0);\r\n    info = info || Buffer.alloc(0);\r\n    \r\n    // Step 1: Extract\r\n    const prk = crypto.createHmac('sha256', salt).update(ikm).digest();\r\n    \r\n    // Step 2: Expand\r\n    const result = Buffer.alloc(length);\r\n    let previous = Buffer.alloc(0);\r\n    let resultPosition = 0;\r\n    const hashLen = 32; // SHA-256 hash length\r\n    \r\n    for (let i = 1; resultPosition < length; i++) {\r\n        const hmac = crypto.createHmac('sha256', prk);\r\n        hmac.update(Buffer.concat([previous, info, Buffer.from([i])]));\r\n        \r\n        const next = hmac.digest();\r\n        const remainder = Math.min(length - resultPosition, hashLen);\r\n        \r\n        next.copy(result, resultPosition, 0, remainder);\r\n        previous = next;\r\n        resultPosition += remainder;\r\n    }\r\n    \r\n    return result;\r\n}\r\n\r\nexport { hkdf };","import { encryptVector, decryptVector, shuffle, unshuffle, computeAuthHash, AuthHash } from '../crypto/index.js';\r\nimport { KeyIdHeader, encodeVectorMetadata, decodeVersionPrefixedValue } from '../headers/index.js';\r\nimport { VectorEncryptionKey, EncryptionKey, ScalingFactor } from '../keys/index.js';\r\nimport { InvalidInputError, DecryptError } from '../exceptions/index.js';\r\nimport crypto from 'crypto';\r\nimport { hkdf } from '../crypto/hkdf.js';\r\n\r\n\r\n/**\r\n * RagEncryptionClient: High-level interface for encryption and decryption.\r\n */\r\nclass RagEncryptionClient {\r\n    /**\r\n * Initializes the RagEncryptionClient with encryption keys.\r\n * @param {Buffer|null} encryptionKey - Raw encryption key bytes.\r\n * @param {number} approximationFactor - Approximation factor for vector encryption.\r\n * @param {KeyProvider} keyProvider - Optional key provider implementation.\r\n * @param {string} keyId - Optional key identifier to use with the key provider.\r\n * @param {boolean} _skipValidation - Internal flag to skip validation (used by create method).\r\n */\r\nconstructor(encryptionKey = null, approximationFactor = 1.0, keyProvider = null, keyId = null, _skipValidation = false) {\r\n    // Skip validation if internal flag is set (used by create method)\r\n    if (_skipValidation) {\r\n        return;\r\n    }\r\n   \r\n    // For direct key initialization only - use static create() for key provider\r\n    if (keyProvider || keyId) {\r\n        throw new InvalidInputError(\"For async key provider initialization, use the static create() method\");\r\n    }\r\n   \r\n    if (!encryptionKey) {\r\n        throw new InvalidInputError(\"Encryption key must be provided when using constructor directly\");\r\n    }\r\n   \r\n    this._initializeWithKey(encryptionKey, approximationFactor);\r\n}\r\n\r\n\r\n/**\r\n * Creates an instance of RagEncryptionClient.\r\n */\r\nstatic async create(encryptionKey = null, approximationFactor = 1.0, keyProvider = null, keyId = null) {\r\n    // Create a new instance with validation skipped\r\n    const client = new RagEncryptionClient(null, 1.0, null, null, true);\r\n   \r\n    if (keyProvider && keyId) {\r\n        // Rest remains the same...\r\n            // Check for the getKey method instead of instanceof\r\n            if (typeof keyProvider.getKey !== 'function') {\r\n                throw new TypeError(\"keyProvider must have a getKey method\");\r\n            }\r\n            await client._initializeWithKeyProvider(keyProvider, keyId, approximationFactor);\r\n        } else if (encryptionKey) {\r\n            client._initializeWithKey(encryptionKey, approximationFactor);\r\n        } else {\r\n            throw new InvalidInputError(\"Either encryptionKey or (keyProvider and keyId) must be provided\");\r\n        }\r\n        return client;\r\n    }\r\n\r\n\r\n    /**\r\n     * Initialize client with direct key material\r\n     * @private\r\n     */\r\n    _initializeWithKey(encryptionKey, approximationFactor) {\r\n        if (!Buffer.isBuffer(encryptionKey) || encryptionKey.length < 32) {\r\n            throw new InvalidInputError(\"Encryption key must be a Buffer of at least 32 bytes\");\r\n        }\r\n        if (typeof approximationFactor !== 'number') {\r\n            throw new InvalidInputError(\"Approximation factor must be a number\");\r\n        }\r\n\r\n\r\n        this.vectorEncryptionKey = new VectorEncryptionKey(\r\n            new ScalingFactor(approximationFactor),\r\n            new EncryptionKey(encryptionKey)\r\n        );\r\n        this.textEncryptionKey = new EncryptionKey(encryptionKey);\r\n        this.deterministicEncryptionKey = new EncryptionKey(encryptionKey);\r\n        this.approximationFactor = approximationFactor;\r\n        this.keyId = \"local-key\";\r\n        this.keyProvider = null;\r\n    }\r\n\r\n\r\n    /**\r\n     * Initialize client with key provider\r\n     * @private\r\n     */\r\n    async _initializeWithKeyProvider(keyProvider, keyId, approximationFactor) {\r\n        try {\r\n            const encryptionKey = await keyProvider.getKey(keyId);\r\n            this._initializeWithKey(encryptionKey, approximationFactor);\r\n            this.keyId = keyId;\r\n            this.keyProvider = keyProvider;\r\n        } catch (error) {\r\n            throw new InvalidInputError(`Failed to get key from provider: ${error.message}`);\r\n        }\r\n    }\r\n\r\n\r\n    // Update rotateKey to support key provider\r\n    /**\r\n     * Rotate to a new encryption key.\r\n     * @param {Buffer} newKeyMaterial - New raw encryption key bytes (optional if using key provider).\r\n     * @param {string} newKeyId - New key identifier to use with the current key provider (optional).\r\n     */\r\n    async rotateKey(newKeyMaterial = null, newKeyId = null) {\r\n        // Store old keys for reference\r\n        this._oldVectorEncryptionKey = this.vectorEncryptionKey;\r\n        this._oldTextEncryptionKey = this.textEncryptionKey;\r\n        this._oldDeterministicEncryptionKey = this.deterministicEncryptionKey;\r\n       \r\n        // Get new key material\r\n        let newKey;\r\n        if (this.keyProvider && newKeyId) {\r\n            // Get from provider if available\r\n            try {\r\n                newKey = await this.keyProvider.getKey(newKeyId);\r\n                this.keyId = newKeyId;\r\n            } catch (error) {\r\n                throw new InvalidInputError(`Failed to get new key from provider: ${error.message}`);\r\n            }\r\n        } else if (newKeyMaterial) {\r\n            // Use directly provided material\r\n            if (!Buffer.isBuffer(newKeyMaterial) || newKeyMaterial.length < 32) {\r\n                throw new InvalidInputError(\"New key material must be a Buffer of at least 32 bytes\");\r\n            }\r\n            newKey = newKeyMaterial;\r\n        } else {\r\n            throw new InvalidInputError(\"Either newKeyMaterial or newKeyId must be provided\");\r\n        }\r\n       \r\n        // Update current keys with new material\r\n        this.vectorEncryptionKey = new VectorEncryptionKey(\r\n            new ScalingFactor(this.approximationFactor),\r\n            new EncryptionKey(newKey)\r\n        );\r\n        this.textEncryptionKey = new EncryptionKey(newKey);\r\n        this.deterministicEncryptionKey = new EncryptionKey(newKey);\r\n    }\r\n\r\n\r\n\r\n\r\n    /**\r\n     * Encrypts a vector embedding.\r\n     * @param {Array<number>} plaintextVector - The plaintext vector to encrypt.\r\n     * @returns {[Array<number>, Buffer]} - A tuple containing the encrypted vector and metadata.\r\n     */\r\n    encryptVector(plaintextVector) {\r\n        if (!Array.isArray(plaintextVector) || !plaintextVector.every((x) => typeof x === 'number')) {\r\n            throw new InvalidInputError(\"Plaintext vector must be an array of numbers\");\r\n        }\r\n\r\n\r\n        // Shuffle the plaintext vector\r\n        const shuffledVector = shuffle(this.textEncryptionKey, plaintextVector);\r\n\r\n\r\n        // Encrypt the shuffled vector\r\n        const encryptResult = encryptVector(\r\n            this.vectorEncryptionKey,\r\n            this.approximationFactor,\r\n            shuffledVector\r\n        );\r\n\r\n\r\n        // Generate metadata\r\n        const keyIdHeader = new KeyIdHeader(\r\n            (typeof this.keyId === 'string' ? this.keyId.split('').reduce((a, c) => a + c.charCodeAt(0), 0) : 1) % 9999,\r\n            \"Standalone\",\r\n            \"VectorMetadata\"\r\n        );\r\n        const metadata = encodeVectorMetadata(keyIdHeader, encryptResult.iv, encryptResult.authHash);\r\n\r\n\r\n        // Return tuple format like Python\r\n        return [encryptResult.ciphertext, metadata];\r\n    }\r\n\r\n\r\n    /**\r\n     * Decrypts an encrypted vector embedding.\r\n     * @param {Array<number>} encryptedVector - The encrypted vector.\r\n     * @param {Buffer} pairedIclInfo - The metadata associated with the encrypted vector.\r\n     * @returns {Array<number>} - The decrypted plaintext vector.\r\n     */\r\n    decryptVector(encryptedVector, pairedIclInfo) {\r\n        if (!Array.isArray(encryptedVector) || !encryptedVector.every((x) => typeof x === 'number')) {\r\n            throw new InvalidInputError(\"Encrypted vector must be an array of numbers\");\r\n        }\r\n        if (!Buffer.isBuffer(pairedIclInfo)) {\r\n            throw new InvalidInputError(\"Metadata must be a Buffer\");\r\n        }\r\n\r\n\r\n        /// Decode metadata\r\n        const { keyIdHeader, remainingBytes } = decodeVersionPrefixedValue(pairedIclInfo);\r\n        const iv = remainingBytes.subarray(0, 12);\r\n        const authHashBytes = remainingBytes.subarray(12);\r\n\r\n\r\n        // Convert the Buffer to an AuthHash object\r\n        const authHash = new AuthHash(authHashBytes);\r\n\r\n\r\n        // Decrypt the vector\r\n        const shuffledVector = decryptVector(\r\n            this.vectorEncryptionKey,\r\n            this.approximationFactor,\r\n            {\r\n                ciphertext: encryptedVector,\r\n                iv,\r\n                authHash\r\n            }\r\n        );\r\n\r\n\r\n        // Unshuffle the vector\r\n        return unshuffle(this.textEncryptionKey, shuffledVector);\r\n    }\r\n\r\n\r\n    /**\r\n     * Encrypts a text string using AES-GCM.\r\n     * @param {string} plaintext - The plaintext string to encrypt.\r\n     * @returns {Object} - Encrypted text, IV, and authentication tag.\r\n     */\r\n    encryptText(plaintext) {\r\n        if (typeof plaintext !== 'string') {\r\n            throw new InvalidInputError(\"Plaintext must be a string.\");\r\n        }\r\n   \r\n        // Ensure the key is exactly 32 bytes\r\n        const key = this.textEncryptionKey.getBytes().subarray(0, 32);\r\n       \r\n        const iv = crypto.randomBytes(12);\r\n        const cipher = crypto.createCipheriv('aes-256-gcm', key, iv);\r\n        const ciphertext = Buffer.concat([cipher.update(plaintext, 'utf8'), cipher.final()]);\r\n        const tag = cipher.getAuthTag();\r\n   \r\n        return { ciphertext, iv, tag };\r\n    }\r\n\r\n\r\n    /**\r\n     * Decrypts an AES-GCM encrypted text.\r\n     * @param {Buffer} ciphertext - The encrypted text.\r\n     * @param {Buffer} iv - The initialization vector.\r\n     * @param {Buffer} tag - The authentication tag.\r\n     * @returns {string} - The decrypted plaintext string.\r\n     */\r\n    decryptText(ciphertext, iv, tag) {\r\n        if (!Buffer.isBuffer(ciphertext) || !Buffer.isBuffer(iv) || !Buffer.isBuffer(tag)) {\r\n            throw new InvalidInputError(\"Ciphertext, IV, and tag must be Buffers.\");\r\n        }\r\n   \r\n        // Ensure the key is exactly 32 bytes\r\n        const key = this.textEncryptionKey.getBytes().subarray(0, 32);\r\n       \r\n        const decipher = crypto.createDecipheriv('aes-256-gcm', key, iv);\r\n        decipher.setAuthTag(tag);\r\n        const plaintext = Buffer.concat([decipher.update(ciphertext), decipher.final()]);\r\n   \r\n        return plaintext.toString('utf8');\r\n    }\r\n\r\n\r\n    /**\r\n     * Encrypts text deterministically using AES-GCM, mirroring Python implementation\r\n     * with HKDF key derivation and deterministic nonce generation.\r\n     * @param {string} plaintext - The plaintext string to encrypt.\r\n     * @returns {Buffer} - The encrypted text with metadata.\r\n     */\r\n    encryptDeterministicText(plaintext) {\r\n        if (typeof plaintext !== 'string') {\r\n            throw new InvalidInputError(\"Plaintext must be a string\");\r\n        }\r\n\r\n\r\n        // 1. Derive key using HKDF similarly to Python implementation\r\n        const salt = Buffer.from('DCPE-Deterministic');\r\n        const info = Buffer.from('deterministic_encryption_key');\r\n        const derivedKey = hkdf(\r\n            this.deterministicEncryptionKey.getBytes(),\r\n            32,\r\n            salt,\r\n            info\r\n        );\r\n\r\n\r\n        // 2. Create deterministic nonce using HMAC from plaintext\r\n        const hmac = crypto.createHmac('sha256', derivedKey);\r\n        hmac.update(Buffer.from(plaintext, 'utf8'));\r\n        const deterministicNonce = hmac.digest().subarray(0, 12);\r\n\r\n\r\n        // 3. Encrypt with AES-GCM using the derived key and deterministic nonce\r\n        const cipher = crypto.createCipheriv('aes-256-gcm', derivedKey, deterministicNonce);\r\n        const ciphertext = Buffer.concat([cipher.update(plaintext, 'utf8'), cipher.final()]);\r\n        const tag = cipher.getAuthTag();\r\n\r\n\r\n        // 4. Match Python's output format: nonce + ciphertext + tag\r\n        return Buffer.concat([deterministicNonce, ciphertext, tag]);\r\n    }\r\n\r\n\r\n    /**\r\n     * Decrypts deterministically encrypted text, matching Python implementation.\r\n     * @param {Buffer} encryptedData - The encrypted text.\r\n     * @returns {string} - The decrypted plaintext string.\r\n     */\r\n    decryptDeterministicText(encryptedData) {\r\n        if (!Buffer.isBuffer(encryptedData)) {\r\n            throw new InvalidInputError(\"Encrypted data must be a Buffer\");\r\n        }\r\n\r\n\r\n        if (encryptedData.length < 28) { // 12 (nonce) + 16 (min tag size)\r\n            throw new InvalidInputError(\"Encrypted data too short\");\r\n        }\r\n\r\n\r\n        // 1. Split components: nonce + ciphertext + tag\r\n        const nonce = encryptedData.subarray(0, 12);\r\n        const ciphertext = encryptedData.subarray(12, encryptedData.length - 16);\r\n        const tag = encryptedData.subarray(encryptedData.length - 16);\r\n\r\n\r\n        // 2. Derive the same key used for encryption\r\n        const salt = Buffer.from('DCPE-Deterministic');\r\n        const info = Buffer.from('deterministic_encryption_key');\r\n        const derivedKey = hkdf(\r\n            this.deterministicEncryptionKey.getBytes(),\r\n            32,\r\n            salt,\r\n            info\r\n        );\r\n\r\n\r\n        // 3. Decrypt with AES-GCM\r\n        try {\r\n            const decipher = crypto.createDecipheriv('aes-256-gcm', derivedKey, nonce);\r\n            decipher.setAuthTag(tag);\r\n            const plaintext = Buffer.concat([decipher.update(ciphertext), decipher.final()]);\r\n            return plaintext.toString('utf8');\r\n        } catch (e) {\r\n            throw new DecryptError(`Deterministic text decryption failed: ${e.message}`);\r\n        }\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\nexport { RagEncryptionClient };\r\n\r\n\r\n// After the RagEncryptionClient class and its export:\r\n\r\n\r\n/**\r\n * Encryption client instance for utility functions\r\n * @type {RagEncryptionClient}\r\n * @private\r\n */\r\nlet _clientInstance = null;\r\n\r\n\r\n/**\r\n * Get or initialize the client instance\r\n * @param {Buffer|VectorEncryptionKey} keys - Encryption keys\r\n * @returns {RagEncryptionClient}\r\n * @private\r\n */\r\nfunction _getClientInstance(keys) {\r\n    if (!_clientInstance) {\r\n        // Extract raw key material if keys is a VectorEncryptionKey\r\n        let keyMaterial;\r\n        if (keys && typeof keys === 'object' && keys.key && typeof keys.key.getBytes === 'function') {\r\n            // If it's a VectorEncryptionKey object, extract the underlying key bytes\r\n            keyMaterial = keys.key.getBytes();\r\n        } else if (Buffer.isBuffer(keys)) {\r\n            // If it's already a Buffer, use it directly\r\n            keyMaterial = keys;\r\n        } else {\r\n            throw new InvalidInputError('Invalid key format: expected Buffer or VectorEncryptionKey');\r\n        }\r\n       \r\n        _clientInstance = new RagEncryptionClient(keyMaterial);\r\n    }\r\n    return _clientInstance;\r\n}\r\n\r\n\r\n/**\r\n * Encrypts a text string using AES-GCM\r\n * @param {string} text - Text to encrypt\r\n * @param {Buffer} keys - Encryption keys\r\n * @param {Object} options - Encryption options\r\n * @returns {Object} - Encrypted text, IV, and authentication tag\r\n */\r\nfunction encryptText(text, keys, options = {}) {\r\n    const client = _getClientInstance(keys);\r\n    return client.encryptText(text);\r\n}\r\n\r\n\r\n/**\r\n * Decrypts an AES-GCM encrypted text\r\n * @param {Object} encryptedText - Encrypted text object with ciphertext, iv, and tag\r\n * @param {Buffer} keys - Encryption keys\r\n * @param {Object} options - Decryption options\r\n * @returns {string} - Decrypted text\r\n */\r\nfunction decryptText(encryptedText, keys, options = {}) {\r\n    const client = _getClientInstance(keys);\r\n    return client.decryptText(encryptedText.ciphertext, encryptedText.iv, encryptedText.tag);\r\n}\r\n\r\n\r\n/**\r\n * Encrypts text deterministically using AES-GCM\r\n * @param {string} value - Value to encrypt\r\n * @param {Buffer} keys - Encryption keys\r\n * @param {Object} options - Encryption options\r\n * @returns {Buffer} - Encrypted value\r\n */\r\nfunction encryptDeterministicText(value, keys, options = {}) {\r\n    const client = _getClientInstance(keys);\r\n    return client.encryptDeterministicText(value);\r\n}\r\n\r\n\r\n/**\r\n * Decrypts deterministically encrypted text\r\n * @param {Buffer} encryptedValue - Encrypted value\r\n * @param {Buffer} keys - Encryption keys\r\n * @param {Object} options - Decryption options\r\n * @returns {string} - Decrypted value\r\n */\r\nfunction decryptDeterministicText(encryptedValue, keys, options = {}) {\r\n    const client = _getClientInstance(keys);\r\n    return client.decryptDeterministicText(encryptedValue);\r\n}\r\n\r\n\r\n// Export additional functions\r\nexport {\r\n    encryptText,\r\n    decryptText,\r\n    encryptDeterministicText,\r\n    decryptDeterministicText,\r\n    encryptDeterministicText as encryptMetadataField,\r\n    decryptDeterministicText as decryptMetadataField\r\n};\r\n","/**\r\n * Validate configuration object against schema\r\n * @param {Object} config - Configuration to validate\r\n * @param {Object} schema - Schema definition\r\n * @returns {Object} - Validated configuration with defaults\r\n */\r\nexport function validateConfig(config, schema) {\r\n    const result = { ...config };\r\n    const errors = [];\r\n  \r\n    // Check required fields\r\n    if (schema.required) {\r\n      for (const field of schema.required) {\r\n        if (result[field] === undefined) {\r\n          errors.push(`Missing required field: ${field}`);\r\n        }\r\n      }\r\n    }\r\n  \r\n    // Apply defaults\r\n    if (schema.properties) {\r\n      for (const [key, prop] of Object.entries(schema.properties)) {\r\n        if (result[key] === undefined && prop.default !== undefined) {\r\n          result[key] = prop.default;\r\n        }\r\n        \r\n        // Type validation\r\n        if (result[key] !== undefined && prop.type) {\r\n          const type = typeof result[key];\r\n          if (type !== prop.type) {\r\n            errors.push(`Type mismatch for ${key}: expected ${prop.type}, got ${type}`);\r\n          }\r\n        }\r\n      }\r\n    }\r\n  \r\n    if (errors.length > 0) {\r\n      throw new Error(`Configuration validation failed: ${errors.join(', ')}`);\r\n    }\r\n  \r\n    return result;\r\n  }\r\n  \r\n  /**\r\n   * Create a schema for configuration validation\r\n   * @param {Object} properties - Schema properties\r\n   * @param {Array<string>} required - Required field names\r\n   * @returns {Object} - Schema definition\r\n   */\r\n  export function createSchema(properties, required = []) {\r\n    return {\r\n      properties,\r\n      required\r\n    };\r\n  }","/**\r\n * Base adapter interface for vector databases\r\n * This is an abstract class that should be extended to create specific database adapters.\r\n * It provides a standard interface for interacting with different vector databases,\r\n * allowing DCPE to work with any vector database that implements this interface.\r\n * \r\n * @example\r\n * ```javascript\r\n * import { BaseAdapter } from 'dcpe-js';\r\n * \r\n * class PineconeAdapter extends BaseAdapter {\r\n *   constructor(config) {\r\n *     super(config);\r\n *     this.client = null;\r\n *   }\r\n * \r\n *   async connect() {\r\n *     // Implement connection to Pinecone\r\n *   }\r\n *   \r\n *   // Implement other required methods...\r\n * }\r\n * ```\r\n */\r\nclass BaseAdapter {\r\n  /**\r\n   * Create a new adapter instance\r\n   * @param {Object} config - Configuration options\r\n   * @param {string} [config.host] - Database host URL\r\n   * @param {string} [config.apiKey] - API key for authentication\r\n   * @param {string} [config.collectionName] - Collection/index name\r\n   * @param {number} [config.dimension] - Vector dimension\r\n   * @param {string} [config.metricType=\"cosine\"] - Distance metric type (cosine, euclidean, dot)\r\n   */\r\n  constructor(config = {}) {\r\n    this.config = config;\r\n  }\r\n\r\n  /**\r\n   * Connect to the vector database\r\n   * Implementations should establish a connection to the database\r\n   * and prepare any necessary resources (create collections, etc.)\r\n   * \r\n   * @returns {Promise<boolean>} - True if connection was successful\r\n   * @throws {Error} - If connection fails\r\n   * \r\n   * @example\r\n   * ```javascript\r\n   * const adapter = new CustomAdapter({ host: 'https://db.example.com', apiKey: 'key123' });\r\n   * await adapter.connect();\r\n   * ```\r\n   */\r\n  async connect() {\r\n    throw new Error('Method not implemented: connect');\r\n  }\r\n\r\n  /**\r\n   * Disconnect from the vector database\r\n   * Implementations should clean up resources and close connections\r\n   * \r\n   * @returns {Promise<void>}\r\n   * @throws {Error} - If disconnection fails\r\n   * \r\n   * @example\r\n   * ```javascript\r\n   * await adapter.disconnect();\r\n   * ```\r\n   */\r\n  async disconnect() {\r\n    throw new Error('Method not implemented: disconnect');\r\n  }\r\n\r\n  /**\r\n   * Insert vectors into the database\r\n   * @param {Array<Object>} vectors - Vectors to insert\r\n   * @param {string} [vectors[].id] - Optional unique identifier for the vector\r\n   * @param {Array<number>} vectors[].vector - The vector embedding to insert\r\n   * @param {Object} [vectors[].metadata] - Optional metadata associated with the vector\r\n   * @returns {Promise<Array<string>>} - IDs of the inserted vectors\r\n   * @throws {Error} - If insertion fails\r\n   * \r\n   * @example\r\n   * ```javascript\r\n   * const vectors = [\r\n   *   { id: 'doc1', vector: [0.1, 0.2, 0.3], metadata: { text: 'encrypted text', category: 'encrypted category' }},\r\n   *   { id: 'doc2', vector: [0.4, 0.5, 0.6], metadata: { text: 'encrypted text', category: 'encrypted category' }}\r\n   * ];\r\n   * const ids = await adapter.insert(vectors);\r\n   * ```\r\n   */\r\n  async insert(vectors) {\r\n    throw new Error('Method not implemented: insert');\r\n  }\r\n\r\n  /**\r\n   * Search for vectors in the database\r\n   * @param {Array<number>} queryVector - Query vector to search for\r\n   * @param {Object} options - Search options\r\n   * @param {number} [options.limit=10] - Maximum number of results to return\r\n   * @param {number} [options.threshold=0.7] - Similarity threshold (database-specific implementation)\r\n   * @param {Object} [options.filter] - Filter conditions for metadata (database-specific implementation)\r\n   * @returns {Promise<Array<Object>>} - Search results with format [{ id, vector, metadata, score/distance }]\r\n   * @throws {Error} - If search fails\r\n   * \r\n   * @example\r\n   * ```javascript\r\n   * const queryVector = [0.1, 0.2, 0.3];\r\n   * const results = await adapter.search(queryVector, { \r\n   *   limit: 5, \r\n   *   filter: { category: encryptedCategoryValue } \r\n   * });\r\n   * ```\r\n   */\r\n  async search(queryVector, options = {}) {\r\n    throw new Error('Method not implemented: search');\r\n  }\r\n}\r\n\r\nexport default BaseAdapter;","/**\r\n * Main DCPE class providing a simple interface to the library's functionality.\r\n * This class serves as the primary entry point for the DCPE library and handles\r\n * key management, vector encryption/decryption, text encryption/decryption, and\r\n * metadata encryption/decryption.\r\n *\r\n * @example\r\n * ```javascript\r\n * // Create a DCPE instance with default configuration\r\n * const dcpe = new DCPE();\r\n *\r\n * // Generate encryption keys\r\n * const keys = await dcpe.generateKeys();\r\n * dcpe.setKeys(keys);\r\n *\r\n * // Encrypt a vector\r\n * const vector = [0.1, 0.2, 0.3, 0.4];\r\n * const encryptedVector = dcpe.encryptVector(vector);\r\n * ```\r\n */\r\nimport * as crypto from './crypto/index.js';\r\nimport * as ragEncryption from './rag_encryption/index.js';\r\nimport * as keyProvider from './key_provider/index.js';\r\nimport * as keys from './keys/index.js';\r\n\r\n\r\nclass DCPE {\r\n  /**\r\n   * Create a new DCPE instance\r\n   * @param {Object} config - Configuration options\r\n   * @param {string} [config.keyProvider='local'] - Key provider type ('local', 'vault', etc.)\r\n   * @param {Object} [config.keyProviderConfig={}] - Configuration options for the key provider\r\n   * @param {Object} [config.vectorConfig={}] - Configuration options for vector operations\r\n   *  \r\n   * @example\r\n   * ```javascript\r\n   * // Create with default configuration (local key provider)\r\n   * const dcpeDefault = new DCPE();\r\n   *\r\n   * // Create with custom configuration\r\n   * const dcpeCustom = new DCPE({\r\n   *   keyProvider: 'local',\r\n   *   vectorConfig: { approximationFactor: 0.95 }\r\n   * });\r\n   * ```\r\n   */\r\n  constructor(config = {}) {\r\n    this.config = {\r\n      // Default configuration\r\n      keyProvider: 'local',\r\n      keyProviderConfig: {},\r\n      vectorConfig: {},\r\n      ...config\r\n    };\r\n   \r\n    this.keyProvider = null;\r\n    this._initialize();\r\n  }\r\n\r\n\r\n  /**\r\n   * Initialize the DCPE instance\r\n   * @private\r\n   */\r\n  _initialize() {\r\n    // Initialize key provider\r\n    this._initializeKeyProvider();\r\n  }\r\n\r\n\r\n  /**\r\n   * Initialize the key provider based on configuration\r\n   * @private\r\n   * @throws {Error} If the specified key provider type is not supported\r\n   */\r\n  _initializeKeyProvider() {\r\n    const { keyProvider: providerType, keyProviderConfig } = this.config;\r\n   \r\n    switch (providerType.toLowerCase()) {\r\n      case 'local':\r\n        this.keyProvider = new keyProvider.LocalKeyProvider(keyProviderConfig);\r\n        break;\r\n      // Add other key providers as needed\r\n      default:\r\n        throw new Error(`Unsupported key provider: ${providerType}`);\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Generate encryption keys for use with the DCPE library\r\n   * @param {Object} options - Options for key generation\r\n   * @param {number} [options.approximationFactor=1.0] - Approximation factor for vector encryption (1.0 = exact, lower values = faster but less accurate)\r\n   * @returns {Promise<Buffer>} - Generated encryption key material that can be set using setKeys()\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * const keys = await dcpe.generateKeys({ approximationFactor: 0.95 });\r\n   * dcpe.setKeys(keys);\r\n   * ```\r\n   */\r\n  async generateKeys(options = {}) {\r\n    return await keys.generateEncryptionKeys(options);\r\n  }\r\n\r\n\r\n  /**\r\n   * Set encryption keys for the DCPE instance\r\n   * @param {Buffer|Object} encryptionKeys - Encryption keys to set\r\n   * @throws {TypeError} If encryption keys are in an invalid format\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * // Generate and set keys\r\n   * const keys = await dcpe.generateKeys();\r\n   * dcpe.setKeys(keys);\r\n   *\r\n   * // Set existing keys\r\n   * const existingKeys = loadKeysFromSecureStorage();\r\n   * dcpe.setKeys(existingKeys);\r\n   * ```\r\n   */\r\n  setKeys(encryptionKeys) {\r\n    this.keyProvider.setKeys(encryptionKeys);\r\n  }\r\n\r\n\r\n  /**\r\n   * Encrypt a vector using DCPE (Distance Comparison Preserving Encryption)\r\n   * This preserves the relative distances between vectors so similarity search\r\n   * still works on the encrypted vectors.\r\n   *\r\n   * @param {Array<number>} vector - Vector to encrypt\r\n   * @param {Object} options - Encryption options\r\n   * @returns {Array<number>} - Encrypted vector that can be stored in a vector database\r\n   * @throws {Error} If encryption fails or keys are not set\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * const vector = [0.1, 0.2, 0.3, 0.4];\r\n   * const encryptedVector = dcpe.encryptVector(vector);\r\n   * // Store encryptedVector in your vector database\r\n   * ```\r\n   */\r\n  encryptVector(vector, options = {}) {\r\n    const key = this.keyProvider.getKeys();\r\n    const approximationFactor = options.approximationFactor || this.config.vectorConfig.approximationFactor || 1.0;\r\n   \r\n    // Directly pass the needed parameters to the crypto function in the correct order\r\n    const result = crypto.encryptVector(key, approximationFactor, vector);\r\n   \r\n    return result.ciphertext; // Return just the ciphertext for storage\r\n  }\r\n\r\n\r\n  /**\r\n   * Decrypt a vector that was encrypted with DCPE\r\n   * @param {Array<number>} encryptedVector - Encrypted vector\r\n   * @param {Object} options - Decryption options\r\n   * @returns {Array<number>} - Original, decrypted vector\r\n   * @throws {Error} If decryption fails or keys are not set\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * const encryptedVector = getVectorFromDatabase();\r\n   * const decryptedVector = dcpe.decryptVector(encryptedVector);\r\n   * ```\r\n   */\r\n  decryptVector(encryptedVector, metadata, options = {}) {\r\n    const key = this.keyProvider.getKeys();\r\n    const approximationFactor = options.approximationFactor || this.config.vectorConfig.approximationFactor || 1.0;\r\n   \r\n    // Create the encryptedResult object expected by the crypto function\r\n    const encryptedResult = {\r\n      ciphertext: encryptedVector,\r\n      iv: metadata.iv,\r\n      authHash: metadata.authHash\r\n    };\r\n   \r\n    return crypto.decryptVector(key, approximationFactor, encryptedResult);\r\n  }\r\n\r\n\r\n  /**\r\n   * Encrypt text using AES-GCM encryption\r\n   * @param {string} text - Text to encrypt\r\n   * @param {Object} options - Encryption options\r\n   * @returns {Object} - Encrypted text object containing ciphertext, iv, and tag\r\n   * @throws {Error} If encryption fails or keys are not set\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * const text = \"This is sensitive information\";\r\n   * const encryptedText = dcpe.encryptText(text);\r\n   * // encryptedText contains { ciphertext, iv, tag } that can be stored\r\n   * ```\r\n   */\r\n  encryptText(text, options = {}) {\r\n    const keys = this.keyProvider.getKeys();\r\n    return ragEncryption.encryptText(text, keys, options);\r\n  }\r\n\r\n\r\n  /**\r\n   * Decrypt text that was encrypted with AES-GCM\r\n   * @param {Object} encryptedText - Encrypted text object containing ciphertext, iv, and tag\r\n   * @param {Object} options - Decryption options\r\n   * @returns {string} - Original, decrypted text\r\n   * @throws {Error} If decryption fails or keys are not set\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * const encryptedText = getFromDatabase();\r\n   * const plaintext = dcpe.decryptText(encryptedText);\r\n   * ```\r\n   */\r\n  decryptText(encryptedText, options = {}) {\r\n    const keys = this.keyProvider.getKeys();\r\n    return ragEncryption.decryptText(encryptedText, keys, options);\r\n  }\r\n\r\n\r\n  /**\r\n   * Encrypt metadata field using deterministic encryption\r\n   * This allows for exact-match filtering on encrypted fields\r\n   *\r\n   * @param {string|number} value - Value to encrypt\r\n   * @param {Object} options - Encryption options\r\n   * @returns {Buffer} - Deterministically encrypted value that can be used for filtering\r\n   * @throws {Error} If encryption fails or keys are not set\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * const category = \"finance\";\r\n   * const encryptedCategory = dcpe.encryptMetadata(category);\r\n   * // Store with vector: { vector: encryptedVector, metadata: { category: encryptedCategory } }\r\n   * ```\r\n   */\r\n  encryptMetadata(value, options = {}) {\r\n    const keys = this.keyProvider.getKeys();\r\n    return ragEncryption.encryptMetadataField(value, keys, options);\r\n  }\r\n\r\n\r\n  /**\r\n   * Decrypt metadata field that was encrypted with deterministic encryption\r\n   * @param {Buffer} encryptedValue - Encrypted value\r\n   * @param {Object} options - Decryption options\r\n   * @returns {string|number} - Original, decrypted value\r\n   * @throws {Error} If decryption fails or keys are not set\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * const encryptedCategory = result.metadata.category;\r\n   * const category = dcpe.decryptMetadata(encryptedCategory);\r\n   * ```\r\n   */\r\n  decryptMetadata(encryptedValue, options = {}) {\r\n    const keys = this.keyProvider.getKeys();\r\n    return ragEncryption.decryptMetadataField(encryptedValue, keys, options);\r\n  }\r\n}\r\n\r\n\r\nexport default DCPE;\r\n","/**\r\n * DCPE-JS - Distance Comparison Preserving Encryption for JavaScript\r\n * Main entry point for the library\r\n */\r\n\r\n// Import core modules\r\nimport * as crypto from './crypto/index.js';\r\nimport * as exceptions from './exceptions/index.js';\r\nimport * as headers from './headers/index.js';\r\nimport * as keyProvider from './key_provider/index.js';\r\nimport * as keys from './keys/index.js';\r\nimport * as ragEncryption from './rag_encryption/index.js';\r\nimport * as configUtils from './utils/config-validator.js';\r\nimport { BaseAdapter } from './adapters/index.js';\r\n\r\n// Import and export the main DCPE class\r\nimport DCPE from './dcpe.js';\r\nexport { DCPE };\r\n\r\n// Export individual modules\r\nexport {\r\n  crypto,\r\n  exceptions,\r\n  headers,\r\n  keyProvider,\r\n  keys,\r\n  ragEncryption,\r\n  configUtils,\r\n  BaseAdapter\r\n};\r\n\r\n// Export version\r\nexport const VERSION = '0.1.0';"],"names":["DCPEError","Error","constructor","message","arguments","length","undefined","name","InvalidConfigurationError","InvalidKeyError","InvalidInputError","EncryptError","DecryptError","VectorEncryptError","replace","VectorDecryptError","OverflowError","ProtobufError","RequestError","SerdeJsonError","TspError","errorVariant","httpCode","tspCode","EncryptionKey","keyBytes","Buffer","isBuffer","TypeError","getBytes","equals","other","toString","ScalingFactor","factor","getFactor","VectorEncryptionKey","scalingFactor","key","deriveFromSecret","secret","tenantId","derivationPath","payload","from","hashResultBytes","crypto","createHmac","update","digest","unsafeBytesToKey","scalingFactorBytes","subarray","keyMaterialBytes","paddedBytes","concat","scalingFactorU32","readUInt32BE","encryptionKey","generateRandomKey","randomBytes","generateEncryptionKeys","options","approximationFactor","keyMaterial","math","create","all","AuthHash","hashBytes","sampleNormalVector","dimensionality","Array","u1Bytes","u2Bytes","u1","readUInt32LE","u2","z0","Math","sqrt","log","cos","PI","sampleUniformPoint","bytes","calculateUniformPointInBall","uniformPoint","radius","pow","normalizeVector","vector","scale","norm","map","val","generateNoiseVector","iv","Number","isFinite","isInteger","normalVector","scaledPoint","createRngFromKey","hmac","counter","bind","shuffle","inputArray","isArray","rng","indices","_","index","i","j","floor","unshuffle","shuffledArray","reverseMap","computeAuthHash","encryptedVector","Float32Array","of","buffer","forEach","encryptVector","noiseVector","ciphertext","every","authHash","decryptVector","encryptedResult","EdekType","Object","freeze","STANDALONE","SAAS_SHIELD","DATA_CONTROL_PLATFORM","PayloadType","DETERMINISTIC_FIELD","VECTOR_METADATA","STANDARD_EDEK","KeyIdHeader","keyId","edekType","payloadType","values","includes","createHeader","writeToBytes","alloc","writeUInt32BE","writeUInt8","_encodeTypeByte","parseFromBytes","headerBytes","typeByte","readUInt8","paddingByte","_decodeTypeByte","edekNumeric","indexOf","payloadNumeric","edekTypeIndex","payloadTypeIndex","VectorMetadata","keyIdHeader","encodeVectorMetadata","decodeVersionPrefixedValue","valueBytes","remainingBytes","KeyProvider","getKey","storeKey","ClientKeyProvider","keyStore","actualKeyId","LocalKeyProvider","keys","currentKey","setKeys","encryptionKeys","getKeys","hkdf","ikm","salt","info","prk","result","previous","resultPosition","hashLen","next","remainder","min","copy","RagEncryptionClient","keyProvider","_skipValidation","_initializeWithKey","client","_initializeWithKeyProvider","vectorEncryptionKey","textEncryptionKey","deterministicEncryptionKey","error","rotateKey","newKeyMaterial","newKeyId","_oldVectorEncryptionKey","_oldTextEncryptionKey","_oldDeterministicEncryptionKey","newKey","plaintextVector","x","shuffledVector","encryptResult","split","reduce","a","c","charCodeAt","metadata","pairedIclInfo","authHashBytes","encryptText","plaintext","cipher","createCipheriv","final","tag","getAuthTag","decryptText","decipher","createDecipheriv","setAuthTag","encryptDeterministicText","derivedKey","deterministicNonce","decryptDeterministicText","encryptedData","nonce","e","_clientInstance","_getClientInstance","text","encryptedText","value","encryptedValue","validateConfig","config","schema","errors","required","field","push","properties","prop","entries","default","type","join","createSchema","BaseAdapter","connect","disconnect","insert","vectors","search","queryVector","DCPE","keyProviderConfig","vectorConfig","_initialize","_initializeKeyProvider","providerType","toLowerCase","generateKeys","ragEncryption","encryptMetadata","decryptMetadata","VERSION"],"mappings":"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MAAM,CAAA;AACtB,GAAA;;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,MAAMc,OAAOA,GAAG;AACd,IAAA,MAAM,IAAIxQ,KAAK,CAAC,iCAAiC,CAAC,CAAA;AACpD,GAAA;;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,MAAMyQ,UAAUA,GAAG;AACjB,IAAA,MAAM,IAAIzQ,KAAK,CAAC,oCAAoC,CAAC,CAAA;AACvD,GAAA;;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,MAAM0Q,MAAMA,CAACC,OAAO,EAAE;AACpB,IAAA,MAAM,IAAI3Q,KAAK,CAAC,gCAAgC,CAAC,CAAA;AACnD,GAAA;;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,MAAM4Q,MAAMA,CAACC,WAAW,EAAgB;AACtC,IAAA,MAAM,IAAI7Q,KAAK,CAAC,gCAAgC,CAAC,CAAA;AACnD,GAAA;AACF;;ACpHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA,MAAM8Q,IAAI,CAAC;AACT;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACE7Q,EAAAA,WAAWA,GAAc;AAAA,IAAA,IAAbyP,MAAM,GAAAvP,SAAA,CAAAC,MAAA,GAAA,CAAA,IAAAD,SAAA,CAAA,CAAA,CAAA,KAAAE,SAAA,GAAAF,SAAA,CAAA,CAAA,CAAA,GAAG,EAAE,CAAA;IACrB,IAAI,CAACuP,MAAM,GAAG;AACZ;AACArD,MAAAA,WAAW,EAAE,OAAO;MACpB0E,iBAAiB,EAAE,EAAE;MACrBC,YAAY,EAAE,EAAE;MAChB,GAAGtB,M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"}